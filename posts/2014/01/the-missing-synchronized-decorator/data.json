{
  "title": "The missing @synchronized decorator.",
  "content": "This is the seventh post in my series of blog posts about Python decorators and how I believe they are generally poorly implemented. It follows on from the previous post titled '[Maintaining decorator state using a class](http://blog.dscpl.com.au/2014/01/maintaining-decorator-state-using-class.html)', with the very first post in the series being '[How you implemented your Python decorator is wrong](http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html)'.\n\n  \nIn the previous post I effectively rounded out the discussion on the implementation of the decorator pattern, or at least the key parts that I care to cover at this point. I may expand on a few other things that can be done at a later time.  \n  \nAt this point I want to start looking at ways this decorator pattern can be used to implement better decorators. For this post I want to look at the @synchronized decorator.  \n  \nThe concept of the @synchronized decorator originates from Java and the idea of being able to write such a decorator in Python was a bit of a poster child when decorators were first added to Python. Despite this, there is no standard @synchronized decorator in the Python standard library. If this was such a good example of why decorators are so useful, why is this the case?  \n  \n\n\n###  Stealing ideas from the Java language\n\n  \nThe equivalent synchronization primitive from Java comes in two forms. These are [synchronized methods](http://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html) and [synchronized statements](http://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html).  \n  \nIn Java, to make a method synchronized, you simply add the synchronized keyword to its declaration:  \n\n\n> public class SynchronizedCounter \\{  \n>  private int c = 0; \n\n> public synchronized void increment\\(\\) \\{  \n>  c++;  \n>  \\} \n\n> public synchronized void decrement\\(\\) \\{  \n>  c--;  \n>  \\} \n\n> public synchronized int value\\(\\) \\{  \n>  return c;  \n>  \\}  \n>  \\}\n\nMaking a method synchronized means it is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block \\(suspend execution\\) until the first thread is done with the object.  \n  \nIn other words, each instance of the class has an intrinsic lock object and upon entering a method the lock is being acquired, with it subsequently being released when the method returns. The lock is what is called a re-entrant lock, meaning that a thread can while it holds the lock, acquire it again without blocking. This is so that from one synchronized method it is possible to call another synchronized method on the same object.  \n  \nThe second way to create synchronized code in Java is with synchronized statements. Unlike synchronized methods, synchronized statements must specify the object that provides the intrinsic lock:  \n\n\n> public void addName\\(String name\\) \\{  \n>  synchronized\\(this\\) \\{  \n>  lastName = name;  \n>  nameCount++;  \n>  \\}  \n>  nameList.add\\(name\\);  \n>  \\}\n\nOf note is that in Java one can use any object as the source of the lock, it is not necessary to create an instance of a specific lock type to synchronize on. If more fined grained locking is required within a class one can simply create or use an existing arbitrary object to synchronize on.  \n\n\n> public class MsLunch \\{  \n>  private long c1 = 0;  \n>  private long c2 = 0;  \n>  private Object lock1 = new Object\\(\\);  \n>  private Object lock2 = new Object\\(\\); \n\n> public void inc1\\(\\) \\{  \n>  synchronized\\(lock1\\) \\{  \n>  c1++;  \n>  \\}  \n>  \\} \n\n> public void inc2\\(\\) \\{  \n>  synchronized\\(lock2\\) \\{  \n>  c2++;  \n>  \\}  \n>  \\}  \n>  \\}\n\nThese synchronization primitives looks relatively simple to use, so how close did people come to actually achieving the level of simplicity by using decorators to do the same in Python.  \n  \n\n\n###  Synchronizing off a thread mutex\n\n  \nIn Python it isn't possible to synchronize off an arbitrary object. Instead it is necessary to create a specific lock object which internally holds a thread mutex. Such a lock object provides an acquire\\(\\) and release\\(\\) method for manipulating the lock.  \n  \nSince context managers were introduced to Python however, locks also support being used in conjunction with the 'with' statement. Using this specific feature, the typical recipe given for implementing a @synchronized decorator for Python is:  \n\n\n> def synchronized\\(lock=None\\):  \n>  def \\_decorator\\(wrapped\\):  \n>  @functools.wraps\\(wrapped\\)  \n>  def \\_wrapper\\(\\*args, \\*\\*kwargs\\):  \n>  with lock:  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  return \\_wrapper  \n>  return \\_decorator \n\n> lock = threading.RLock\\(\\) \n\n> @synchronized\\(lock\\)  \n>  def function\\(\\):  \n>  pass\n\nUsing this approach becomes annoying after a while because for every distinct function that needs to be synchronized, you have to first create a companion thread lock to go with it.  \n  \nThe alternative to needing to pass in the lock object each time, is to create one automatically for each use of the decorator.  \n\n\n> def synchronized\\(wrapped\\):  \n>  lock = threading.RLock\\(\\) \n\n> @functools.wraps\\(wrapped\\)  \n>  def \\_wrapper\\(\\*args, \\*\\*kwargs\\):  \n>  with lock:  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  return \\_wrapper \n\n> @synchronized  \n>  def function\\(\\):  \n>  pass\n\nWe can even use the pattern described previously for allowing optional decorator arguments to permit either approach.  \n\n\n> def synchronized\\(wrapped=None, lock=None\\):  \n>  if wrapped is None:  \n>  return functools.partial\\(synchronized, lock=lock\\) \n\n> if lock is None:  \n>  lock = threading.RLock\\(\\) \n\n> @functools.wraps\\(wrapped\\)  \n>  def \\_wrapper\\(\\*args, \\*\\*kwargs\\):  \n>  with lock:  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  return \\_wrapper \n\n> @synchronized  \n>  def function1\\(\\):  \n>  pass \n\n> lock = threading.Lock\\(\\) \n\n> @synchronized\\(lock=lock\\)  \n>  def function2\\(\\):  \n>  pass\n\nWhatever the approach, the decorator being based on a function closure suffers all the problems we have already outlined. The first step we can therefore take is to update it to use our new decorator factory instead.  \n\n\n> def synchronized\\(wrapped=None, lock=None\\):  \n>  if wrapped is None:  \n>  return functools.partial\\(synchronized, lock=lock\\) \n\n> if lock is None:  \n>  lock = threading.RLock\\(\\) \n\n> @decorator  \n>  def \\_wrapper\\(wrapped, instance, args, kwargs\\):  \n>  with lock:  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  return \\_wrapper\\(wrapped\\)\n\nBecause this is using our decorator factory, it also means that the same code is safe to use on instance, class or static methods as well.  \n  \nUsing this on methods of a class though starts to highlight why this simplistic approach isn't particularly useful. This is because the locking only applies to calls made to the specific method which is wrapped. Plus that it will be across that one method on all instances of the class. This isn't really want we want and doesn't mirror how synchronized methods in Java work.  \n  \nReiterating what we are after again, for all instance methods of a specific instance of a class, if they have been decorated as being synchronized, we want them to synchronize off a single lock object associated with the class instance.  \n  \nNow there have been posts describing how to improve on this in the past, including for example [this](http://theorangeduck.com/page/synchronized-python) quite involved attempt. Personally though I find the way in which it is done is quite clumsy and even suspect it isn't actually thread safe, with a race condition over the creation of some of the locks.  \n  \nBecause it used function closures and didn't have our concept of a universal decorator, it was also necessary to create a multitude of different decorators and then try and plaster them together under a single decorator entry point. Obviously, we should now be able to do a lot better than this.  \n  \n\n\n###  Storing the thread mutex on objects\n\n  \nStarting over, lets take a fresh look at how we can manage the thread locks we need to have. Rather than requiring the lock be passed in, or creating it within a function closure which is then available to the nested wrapper, lets try and manage the locks within the wrapper itself.  \n  \nIn doing this the issue is where can we store the thread lock. The only options for storing any data between invocations of the wrapper are going to be on the wrapper itself, on the wrapped function object, in the case of wrapping an instance method, on the class instance, or for a class method, on the class.  \n  \nLets first consider the case of a normal function. In that case what we can do is store the required thread lock on the wrapped function object itself.  \n\n\n> @decorator  \n>  def synchronized\\(wrapped, instance, args, kwargs\\):  \n>  lock = vars\\(wrapped\\).get\\('\\_synchronized\\_lock', None\\) \n\n> if lock is None:  \n>  lock = vars\\(wrapped\\).setdefault\\('\\_synchronized\\_lock', threading.RLock\\(\\)\\) \n\n> with lock:  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\) \n\n> @synchronized  \n>  def function\\(\\):  \n>  pass \n\n> >>> function\\(\\) \n\n> >>> function.\\_synchronized\\_lock  \n>  <\\_RLock owner=None count=0>\n\nA key issue we have to deal with in doing this is how to create the thread lock the first time it is required. To do that the first thing we need do is to see if we already have created a thread lock.  \n\n\n> lock = vars\\(wrapped\\).get\\('\\_synchronized\\_lock', None\\)\n\nIf this returns a valid thread lock object we are fine and can continue on to attempt to acquire the lock. If however it didn't exist we need to create it, but we have to be careful how we do this in order to avoid a race condition when two threads have entered this section of code at the same time and both believe it is responsible for creating the thread lock.  \n  \nThe trick we use to solve this is to use:  \n\n\n> lock = vars\\(wrapped\\).setdefault\\('\\_synchronized\\_lock', threading.RLock\\(\\)\\)\n\nIn the case of two threads trying to set the lock at the same time, they will both actually create an instance of a thread lock, but by virtue of using dict.setdefault\\(\\), only one of them will win and actually be able to set it to the instance of the thread lock it created.  \n  \nAs dict.setdefault\\(\\) then returns whichever is the first value to be stored, both threads will then continue on and attempt to acquire the same thread lock object. It doesn't matter here that one of the thread objects gets thrown away as it will only occur at the time of initialisation and only if there was actually a race to set it.  \n  \nWe have therefore managed to replicate what we had originally, the difference though being that the thread lock is stored on the wrapped function, rather than on the stack of an enclosing function. We still have the issue that every instance method will have a distinct lock.  \n  \nThe simple solution is that we use the fact that this is what we are calling a universal decorator and use the ability to detect in what context the decorator was used.  \n  \nSpecifically, what we want to do is detect when we are being used on an instance method or class method, and store the lock on the object passed as the 'instance' argument instead.  \n\n\n> @decorator  \n>  def synchronized\\(wrapped, instance, args, kwargs\\):  \n>  if instance is None:  \n>  context = vars\\(wrapped\\)  \n>  else:  \n>  context = vars\\(instance\\) \n\n> lock = context.get\\('\\_synchronized\\_lock', None\\) \n\n> if lock is None:  \n>  lock = context.setdefault\\('\\_synchronized\\_lock', threading.RLock\\(\\)\\) \n\n> with lock:  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)\n\n> class Object\\(object\\):  \n>  @synchronized  \n>  def method\\_im\\(self\\):  \n>  pass \n\n> @synchronized  \n>  @classmethod  \n>  def method\\_cm\\(cls\\):  \n>  pass\n\n> o1 = Object\\(\\)  \n>  o2 = Object\\(\\) \n\n> >>> o1.method\\_im\\(\\)  \n>  >>> o1.\\_synchronized\\_lock  \n>  <\\_RLock owner=None count=0>  \n>  >>> id\\(o1.\\_synchronized\\_lock\\)  \n>  4386605392 \n\n> >>> o2.method\\_im\\(\\)  \n>  >>> o2.\\_synchronized\\_lock  \n>  <\\_RLock owner=None count=0>  \n>  >>> id\\(o2.\\_synchronized\\_lock\\)  \n>  4386605456\n\nThis simple change has actually achieved the result we desired. If the synchronized decorator is used on a normal function then the thread lock will be stored on the function itself and it will stand alone and only be synchronized with calls to the same function.  \n  \nFor the case of the instance method, the thread lock will be stored on the instance of the class the instance methods are bound too and any instance methods marked as being synchronized on that class will all synchronize on that single thread lock, thus mimicking how Java behaves.  \n  \nNow what about that class method. In this case the instance argument is actually the class type. If the thread lock is stored on the type, then the result would be that if there were multiple class methods and they were all marked as synchronized, they would exclude each other. The thread lock in this case is distinct from any used by instance methods, but that is also actually what we want.  \n  \nDoes the code work though for a class method?  \n\n\n> >>> Object.method\\_cm\\(\\)  \n>  Traceback \\(most recent call last\\):  \n>  File \"<stdin>\", line 1, in <module>  \n>  File \"test.py\", line 38, in \\_\\_call\\_\\_  \n>  return self.wrapper\\(self.wrapped, instance, args, kwargs\\)  \n>  File \"synctest.py\", line 176, in synchronized  \n>  lock = context.setdefault\\('\\_synchronized\\_lock',  \n>  AttributeError: 'dictproxy' object has no attribute 'setdefault'\n\nUnfortunately not.  \n  \nThe reason this is the case is that the \\_\\_dict\\_\\_ of a class type is not a normal dictionary, but a dictproxy. A dictproxy doesn't share the same methods as a normal dict and in particular, it does not provide the setdefault\\(\\) method.  \n  \nWe therefore need a different way of synchronizing the creation of the thread lock the first time for the case where instance is a class.  \n  \nWe also have another issue due to a dictproxy being used. That is that dictproxy doesn't support item assignment.  \n\n\n> >>> vars\\(Object\\)\\['\\_synchronized\\_lock'\\] = threading.RLock\\(\\)  \n>  Traceback \\(most recent call last\\):  \n>  File \"<stdin>\", line 1, in <module>  \n>  TypeError: 'dictproxy' object does not support item assignment\n\nWhat it does still support though is attribute assignment.  \n\n\n> >>> setattr\\(Object, '\\_synchronized\\_lock', threading.RLock\\(\\)\\)  \n>  >>> Object.\\_synchronized\\_lock  \n>  <\\_RLock owner=None count=0>\n\nand since both function objects and class instances do as well, we will need to switch to that method of updating attributes.  \n  \n\n\n###  Storing a meta lock on the decorator\n\n  \nAs to an alternative for using dict.setdefault\\(\\) as an atomic way of setting the lock the first time, what we can do instead is use a meta thread lock stored on the @synchronized decorator itself. With this we still have the issue though of ensuring that only one thread can get to set it. We therefore use dict.setdefault\\(\\) to control creation of the meta lock at least.  \n\n\n> @decorator  \n>  def synchronized\\(wrapped, instance, args, kwargs\\):  \n>  if instance is None:  \n>  owner = wrapped  \n>  else:  \n>  owner = instance \n\n> lock = vars\\(owner\\).get\\('\\_synchronized\\_lock', None\\) \n\n> if lock is None:  \n>  meta\\_lock = vars\\(synchronized\\).setdefault\\(  \n>  '\\_synchronized\\_meta\\_lock', threading.Lock\\(\\)\\) \n\n> with meta\\_lock:  \n>  lock = vars\\(owner\\).get\\('\\_synchronized\\_lock', None\\) \n\n> if lock is None:  \n>  lock = threading.RLock\\(\\)  \n>  setattr\\(owner, '\\_synchronized\\_lock', lock\\) \n\n> with lock:  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)\n\nNote that because of the gap between checking for the existence of the lock for the wrapped function and creating the meta lock, after we have acquired the meta lock we need to once again check to see if the lock exists. This is to handle the case where two threads came into the code at the same time and are racing to be the first to create the lock.  \n  \nNow one thing which is very important in this change is that we only swapped to using attribute access for updating the lock for the wrapped function. We have not changed to using getattr\\(\\) for looking up the lock in the first place and are still looking it up in \\_\\_dict\\_\\_ as returned by vars\\(\\).  \n  \nThis is necessary because when getattr\\(\\) is used on an instance of a class, if that attribute doesn't exist on the instance of the class, then the lookup rules mean that if the attribute instead existed on the class type, then that would be returned instead.  \n  \nThis would cause problems if a synchronized class method was the first to be called, because it would then leave a lock on the class type. When the instance method was subsequently called, if getattr\\(\\) were used, it would find the lock on the class type and return it and it would be wrongly used. Thus we stay with looking for the lock via \\_\\_dict\\_\\_ as that will only contain what actually exists in the instance.  \n  \nWith these changes we are now all done and all lock creation is now completely automatic, with an appropriate lock created for the different contexts the decorator is used in.  \n\n\n> @synchronized  \n>  def function\\(\\):  \n>  pass \n\n> class Object\\(object\\):  \n>  @synchronized  \n>  def method\\_im\\(self\\):  \n>  pass \n\n> @synchronized  \n>  @classmethod  \n>  def method\\_cm\\(cls\\):  \n>  pass \n\n> o = Object\\(\\) \n\n> >>> function\\(\\)  \n>  >>> id\\(function.\\_synchronized\\_lock\\)  \n>  4338158480 \n\n> >>> Object.method\\_cm\\(\\)  \n>  >>> id\\(Object.\\_synchronized\\_lock\\)  \n>  4338904656 \n\n> >>> o.method\\_im\\(\\)  \n>  >>> id\\(o.\\_synchronized\\_lock\\)  \n>  4338904592\n\nThe code also works for where @synchronized is used on a static method or class type. In summary, the result for the different places @synchronized can be placed is:  \n\n\n> @synchronized \\# lock bound to function1  \n>  def function1\\(\\):  \n>  pass \n\n> @synchronized \\# lock bound to function2  \n>  def function2\\(\\):  \n>  pass \n\n> @synchronized \\# lock bound to Class  \n>  class Class\\(object\\): \n\n> @synchronized \\# lock bound to instance of Class  \n>  def function\\_im\\(self\\):  \n>  pass \n\n> @synchronized \\# lock bound to Class  \n>  @classmethod  \n>  def function\\_cm\\(cls\\):  \n>  pass \n\n> @synchronized \\# lock bound to function\\_sm  \n>  @staticmethod  \n>  def function\\_sm\\(\\):  \n>  pass\n\n  \n\n\n###  Implementing synchronized statements\n\n  \nSo we are all done with implementing support for synchronized methods, but what about those synchronized statements. The goal here is that we want to be able to write:  \n\n\n> class Object\\(object\\): \n\n> @synchronized  \n>  def function\\_im\\_1\\(self\\):  \n>  pass \n\n> def function\\_im\\_2\\(self\\):  \n>  with synchronized\\(self\\):  \n>  pass\n\nThat is, we need for 'synchronized' to not only be usable as a decorator, but for it also be able to be used as a context manager.  \n  \nIn this role, similar to with Java, it would be supplied the object on which synchronization is to occur, which for instance methods would be the 'self' object or instance of the class.  \n  \nFor an explanation of how we can do this though, you will need to wait for the next instalment in this series of posts.",
  "date": "Tuesday, January 14, 2014",
  "author": "Graham Dumpleton",
  "url": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html",
  "post_id": "8848250866326062903",
  "blog_id": "2363643920942057324",
  "comments": [
    {
      "comment_id": "6964263341898819717",
      "author": "Adam",
      "author_url": "https://www.blogger.com/profile/12468789252148945129",
      "author_profile_id": "12468789252148945129",
      "content": "Do note your code can leak locks considerably, which is OK on ref-counted implementations, but less so on garbage-collected ones.",
      "timestamp": "January 15, 2014 at 12:27 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389706036201#c6964263341898819717",
      "is_blog_author": false
    },
    {
      "comment_id": "7470848772883850249",
      "author": "Unknown",
      "author_url": "https://www.blogger.com/profile/14816448396815798412",
      "author_profile_id": "14816448396815798412",
      "content": "This comment has been removed by a blog administrator.",
      "timestamp": "January 15, 2014 at 3:00 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389715235810#c7470848772883850249",
      "is_blog_author": false
    },
    {
      "comment_id": "906760769881244325",
      "author": "Unknown",
      "author_url": "https://www.blogger.com/profile/14816448396815798412",
      "author_profile_id": "14816448396815798412",
      "content": "Decorating a class with this seems a bit unintuitive, as my understanding is that it would act like each class method was decorated without affecting either instance or static methods.  \n  \nMaking it behave as I, as a naive user, would expect \\(applying to all methods, regardless of type, though I could also see still excluding static methods\\) seems unachievable with the current implementation. However, perhaps it is doable when the decorator is converted to a class to double as a context manager.",
      "timestamp": "January 15, 2014 at 3:52 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389718348527#c906760769881244325",
      "is_blog_author": false
    },
    {
      "comment_id": "532556236721417259",
      "author": "Wyatt",
      "author_url": "https://www.blogger.com/profile/02038557558334568410",
      "author_profile_id": "02038557558334568410",
      "content": "Could you create the meta\\_lock as a global or attach it to synchronize up front?",
      "timestamp": "January 15, 2014 at 6:56 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389729381278#c532556236721417259",
      "is_blog_author": false
    },
    {
      "comment_id": "4203465876185095452",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "Decorating a class is an odd one and there isn't really an equivalent in Java. Overall I am not sure there is a valid use case and it could well cause issues with deriving classes. Important thing was just to make sure it didn't completely blow up if anyone tried it. Since once can detect that specific use case by seeing if the wrapped object is a class, then one could always raise a NotImplemented exception indicating that it isn't a supported use case.",
      "timestamp": "January 15, 2014 at 7:48 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389732506531#c4203465876185095452",
      "is_blog_author": true
    },
    {
      "comment_id": "4646128071296599625",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "For the meta lock, yes you could create it outside of the code for the wrapper function in a distinct global variable or assign it back to synchronized. I did it in the wrapper so that it was self contained, but also so I could show how in doing it that way that one needed to recheck whether the original lock had since been created once the meta lock had been acquired. So interesting technique that isn't often demonstrated from what I have seen.",
      "timestamp": "January 15, 2014 at 7:54 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389732899751#c4646128071296599625",
      "is_blog_author": true
    },
    {
      "comment_id": "137930840771698308",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "@Adam Can you explain what you see as the issue when you say it would leak locks 'considerably'? I don' really get why you seem to be emphasising the point and think it is a big issue.  \n  \nThe cases where locks would be redundantly created and discarded would be quite rare.  \n  \nAs to other locks created they persist for the life of the object they are attached to and would be no different to any other way you created locks explicitly, such as in the constructor for a class with it being assigned to the instance.",
      "timestamp": "January 15, 2014 at 8:02 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389733325223#c137930840771698308",
      "is_blog_author": true
    },
    {
      "comment_id": "6465204646861144566",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "Actually, since the possibility of a redundant lock only occurs for the meta lock, it can only occur once.",
      "timestamp": "January 15, 2014 at 8:04 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389733451507#c6465204646861144566",
      "is_blog_author": true
    },
    {
      "comment_id": "4792783182105595135",
      "author": "Adam",
      "author_url": "https://www.blogger.com/profile/12468789252148945129",
      "author_profile_id": "12468789252148945129",
      "content": "I think I was not looking at the final version of the code. You can still leak the meta lock \\(N-1\\) times, where N is the number of threads that enter the decorator for the first time simultaneously.   \n  \nThe underlying concern is bumping the resource limit for locks, which is generally not unlimited. As such, one probably shouldn't create them unnecessarily.  \n  \nIn practice, it's not problematic since you should typically will run out of threads first.",
      "timestamp": "January 15, 2014 at 3:24 PM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389759841503#c4792783182105595135",
      "is_blog_author": false
    },
    {
      "comment_id": "4964971669015428013",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "The situation with the meta lock is no different to the situation with any transient objects created on the stack of a function call. They are all going to be subject to the whims of the garbage collector in pypy.  \n  \nImportant is that there are no function closure involved here so it isn't like a reference to a function closure is being held by anything thereby prevent cleanup of objects created in the context of the outer function for the closure.  \n  \nSo to call it a leak is a bit misleading, as it is just like any other temporary object created.  \n  \nWhen such an object internally references an OS resource where there is limited number then sure you can have issues if lots are created, such as people who open files and never explicit close them, but that isn't happening here.",
      "timestamp": "January 15, 2014 at 3:45 PM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389761140474#c4964971669015428013",
      "is_blog_author": true
    },
    {
      "comment_id": "1440470960072815204",
      "author": "Adam",
      "author_url": "https://www.blogger.com/profile/12468789252148945129",
      "author_profile_id": "12468789252148945129",
      "content": "\"When such an object internally references an OS resource where there is limited number then sure you can have issues if lots are created, such as people who open files and never explicit close them, but that isn't happening here.\"  \n  \nThat's my entire point... that very well may be happening here. Synchronization primitives are not usually as precious as file descriptors, but they very well may be more precious than memory. Windows, for example, only allows 2^24 kernel object handles.",
      "timestamp": "January 15, 2014 at 11:35 PM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389789339591#c1440470960072815204",
      "is_blog_author": false
    },
    {
      "comment_id": "3853448338035839898",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "I still believe you are making a mountain out of a mole hill. The possibility can only occur once per process, it is not per use of the decorator.  \n  \nThe way that Python handles thread switching also would contribute to making it a rare event. This is because in lieu of a thread yielding up control itself, Python only considers switching threads every so often based on the number of instructions executed.  \n  \nFor CPython this interval \\(sys.getcheckinterval\\(\\)\\) is 100. In pypy it is 10000, although I don't know for sure to what degree it uses that or uses other inputs to determine when to switch threads. Either way, the window in which the switch would need to occur is very small as there are going to be a very small number of instructions in the critical part when a switch would cause the creation of a redundant lock instance.  \n  \nFinally , the whole issue is also very easy to eliminate by changing the code to create the meta lock outside of the synchronized function as was asked by someone else. This way it would be created up front at the time the module is imported and no check would be required to create it from the thread itself.",
      "timestamp": "January 16, 2014 at 8:29 AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html?showComment=1389821382867#c3853448338035839898",
      "is_blog_author": true
    }
  ],
  "labels": [
    "decorators",
    "python"
  ],
  "metadata": {
    "published_timestamp": "2014-01-14T22:03:00+11:00",
    "blog_title": "Graham Dumpleton",
    "page_title": "Graham Dumpleton: The missing @synchronized decorator.",
    "og_title": "The missing @synchronized decorator.",
    "og_description": " This is the seventh post in my series of blog posts about Python decorators and how I believe they are generally poorly implemented. It fol...",
    "og_url": "http://blog.dscpl.com.au/2014/01/the-missing-synchronized-decorator.html"
  },
  "downloaded_images": []
}