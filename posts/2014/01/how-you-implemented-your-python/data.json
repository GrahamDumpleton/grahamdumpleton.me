{
  "title": "How you implemented your Python decorator is wrong.",
  "content": "The rest of the Python community is currently doing lots of navel gazing over the issue of Python 3 adoption and the whole unicode/bytes divide. I am so over that and gave up caring when my will to work on WSGI stuff was leached away by how long it took to get the WSGI specification updated for Python 3.  \n  \nInstead my current favourite gripe these days is about how people implement Python decorators. Unfortunately, it appears to be a favourite topic for blogging by Python developers. It is like how when WSGI was all the rage and everyone wanted to write their own WSGI server or framework. Now it is like a rite of passage that one must blog about how to implement Python decorators as a way of showing that you understand Python. As such, I get lots of opportunity to grumble and wince. If only they did truly understand what they were describing and what problems exist with the approach they use.  \n  \nSo what is my gripe then. My gripe is that although one can write a very simple decorator using a function closure, the scope it can be used in is usually limited. The most basic pattern for implementing a Python decorator also breaks various stuff related to introspection.  \n  \nNow most people will say who cares, it does the job I want to do and I don't have time to care whether it is correct in all situations.  \n  \nAs people will know from when I did care more about WSGI, I am a pedantic arse though and when one does something, I like to see it done correctly.  \n  \nBesides my overly obsessive personal trait, it actually does also affect me in my day job as well. This is because I write tools which are dependent upon being able to introspect into code and I need the results I get back to be correct. If they aren't, then the data I generate becomes useless as information can get grouped against the wrong thing.  \n  \nAs well as using introspection, I also do lots of evil stuff with monkey patching. As it happens, monkey patching and the function wrappers one applies aren't much different to decorators, it is just how they get applied which is different. Because though monkey patching entails going in and modifying other peoples code when they were not expecting it, or designing for it, means that when you do go in and wrap a function that how you do it is very important. If you do not do it correctly then you can crash the users application or inadvertently change how it runs.  \n  \nThe first thing that is vitally important is preserving introspection for the wrapped function. Another not so obvious thing though is that you need to ensure that you do not mess with how the execution model for the Python object model works.  \n  \nNow I can in my own function wrappers that are used when performing monkey patching ensure that these two requirements are met so as to ensure that the function wrapper is transparent, but it can all fall in a heap when one needs to monkey patch functions which already have other decorators applied.  \n  \nSo when you implement a Python decorator and do it poorly it can affect me and what I want to do. If I have to subsequently work around when you do it wrong, I get somewhat annoyed and grumpy as more often than not that entails a lot of pain.  \n  \nTo cover everything there is to know about what is wrong with your typical Python decorators and wrapping of functions, plus how to fix it, will take a lot of explaining, so one blog post isn't going to be enough. See this blog post therefore as just part one of an extended discussion.  \n  \nFor this first instalment I will simply go through the various ways in which your typical Python decorator can cause problems.  \n  \n\n\n###  Basics of a Python decorator\n\n  \nEveryone should know what the Python decorator syntax is.  \n\n\n> @function\\_wrapper  \n>  def function\\(\\):  \n>  pass\n\nThe '@' annotation to denote the application of a decorator was only added in Python 2.4. It is actually though only fancy syntactic sugar. It is actually equivalent to writing:  \n\n\n> def function\\(\\):  \n>  pass  \n>  function = function\\_wrapper\\(function\\)\n\nand what you would have done prior to Python 2.4.  \n  \nThe decorator syntax is therefore just a short hand way of being able to apply a wrapper around an existing function, or otherwise modify the existing function in place, while the definition of the function is being setup.  \n  \nWhat is referred to as monkey patching achieves pretty much the same outcome, the difference being that when monkey patching the wrapper isn't being applied at the time the definition of the function is being setup, but is applied retrospectively from a different context after the fact.  \n  \n\n\n###  Anatomy of a function wrapper\n\n  \nAlthough I mentioned using function closures to implement a decorator, to understand how the more generic case of a function wrapper works it is more illustrative to show how to implement it using a class.  \n\n\n> class function\\_wrapper\\(object\\):  \n>  def \\_\\_init\\_\\_\\(self, wrapped\\):  \n>  self.wrapped = wrapped  \n>  def \\_\\_call\\_\\_\\(self, \\*args, \\*\\*kwargs\\):  \n>  return self.wrapped\\(\\*args, \\*\\*kwargs\\)\n\n> @function\\_wrapper  \n>  def function\\(\\):  \n>  pass\n\nThe class instance in this example is initialised with and records the original function object. When the now wrapped function is called, it is actually the \\_\\_call\\_\\_\\(\\) method of the wrapper object which is invoked. This in turn would then call the original wrapped function.  \n  \nSimply passing through the call to the wrapper alone isnâ€™t particularly useful, so normally you would actually want to do some work either before or after the wrapped function is called. Or you may want to modify the input arguments or the result as they pass through the wrapper. This is just a matter of modifying the \\_\\_call\\_\\_\\(\\) method appropriately to do what you want.  \n  \nUsing a class to implement the wrapper for a decorator isn't actually that popular. Instead a function closure is more often used. In this case a nested function is used as the wrapper and it is that which is returned by the decorator function. When the now wrapped function is called, the nested function is actually being called. This in turn would again then call the original wrapped function.  \n\n\n> def function\\_wrapper\\(wrapped\\):  \n>  def \\_wrapper\\(\\*args, \\*\\*kwargs\\):  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  return \\_wrapper \n\n> @function\\_wrapper  \n>  def function\\(\\):  \n>  pass\n\nIn this example the nested function doesn't actually get passed the original wrapped function explicitly. But it will still have access to it via the arguments given to the outer function call. This does away with the need to create a class to hold what was the wrapped function and thus why it is convenient and generally more popular.  \n  \n\n\n###  Introspecting a function\n\n  \nNow when we talk about functions, we expect them to specify properties which describe them as well as document what they do. These include the \\_\\_name\\_\\_ and \\_\\_doc\\_\\_ attributes. When we use a wrapper though, this no longer works as we expect as in the case of using a function closure, the details of the nested function are returned.  \n\n\n> def function\\_wrapper\\(wrapped\\):  \n>  def \\_wrapper\\(\\*args, \\*\\*kwargs\\):  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  return \\_wrapper \n\n> @function\\_wrapper  \n>  def function\\(\\):  \n>  pass \n\n> >>> print\\(function.\\_\\_name\\_\\_\\)  \n>  \\_wrapper\n\nIf we use a class to implement the wrapper, as class instances do not normally have a \\_\\_name\\_\\_ attribute, attempting to access the name of the function will actually result in an AttributeError exception.  \n\n\n> class function\\_wrapper\\(object\\):  \n>  def \\_\\_init\\_\\_\\(self, wrapped\\):  \n>  self.wrapped = wrapped  \n>  def \\_\\_call\\_\\_\\(self, \\*args, \\*\\*kwargs\\):  \n>  return self.wrapped\\(\\*args, \\*\\*kwargs\\) \n\n> @function\\_wrapper  \n>  def function\\(\\):  \n>  pass \n\n> >>> print\\(function.\\_\\_name\\_\\_\\)  \n>  Traceback \\(most recent call last\\):  \n>  File \"<stdin>\", line 1, in <module>  \n>  AttributeError: 'function\\_wrapper' object has no attribute '\\_\\_name\\_\\_'\n\nThe solution here when using a function closure is to copy the attributes of interest from the wrapped function to the nested wrapper function. This will then result in the function name and documentation strings being correct.  \n\n\n> def function\\_wrapper\\(wrapped\\):  \n>  def \\_wrapper\\(\\*args, \\*\\*kwargs\\):  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  \\_wrapper.\\_\\_name\\_\\_ = wrapped.\\_\\_name\\_\\_  \n>  \\_wrapper.\\_\\_doc\\_\\_ = wrapped.\\_\\_doc\\_\\_  \n>  return \\_wrapper \n\n> @function\\_wrapper  \n>  def function\\(\\):  \n>  pass \n\n> >>> print\\(function.\\_\\_name\\_\\_\\)  \n>  function\n\nNeeding to manually copy the attributes is laborious, and would need to be updated if any further special attributes were added which needed to be copied. For example, we should also copy the \\_\\_module\\_\\_ attribute, and in Python 3 the \\_\\_qualname\\_\\_ and \\_\\_annotations\\_\\_ attributes were added. To aid in getting this right, the Python standard library provides the functools.wraps\\(\\) decorator which does this task for you.  \n\n\n> import functools \n\n> def function\\_wrapper\\(wrapped\\):  \n>  @functools.wraps\\(wrapped\\)  \n>  def \\_wrapper\\(\\*args, \\*\\*kwargs\\):  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  return \\_wrapper \n\n> @function\\_wrapper  \n>  def function\\(\\):  \n>  pass \n\n> >>> print\\(function.\\_\\_name\\_\\_\\)  \n>  function\n\nIf using a class to implement the wrapper, instead of the functools.wraps\\(\\) decorator, we would use the functools.update\\_wrapper\\(\\) function.  \n\n\n> import functools \n\n> class function\\_wrapper\\(object\\):  \n>  def \\_\\_init\\_\\_\\(self, wrapped\\):  \n>  self.wrapped = wrapped  \n>  functools.update\\_wrapper\\(self, wrapped\\)  \n>  def \\_\\_call\\_\\_\\(self, \\*args, \\*\\*kwargs\\):  \n>  return self.wrapped\\(\\*args, \\*\\*kwargs\\)\n\nSo we might have a solution to ensuring the function name and any documentation string is correct in the form of functools.wraps\\(\\), but actually we don't and this will not always work as I will show below.  \n  \nNow what if we want to query the argument specification for a function. This also fails and instead of returning the argument specification for the wrapped function, it returns that of the wrapper. In the case of using a function closure, this is the nested function. The decorator is therefore not signature preserving.  \n\n\n> import inspect \n\n> def function\\_wrapper\\(wrapped\\): ...  \n>  @function\\_wrapper  \n>  def function\\(arg1, arg2\\): pass \n\n> >>> print\\(inspect.getargspec\\(function\\)\\)  \n>  ArgSpec\\(args=\\[\\], varargs='args', keywords='kwargs', defaults=None\\)\n\nA worse situation again occurs with the class based wrapper. This time we get an exception complaining that the wrapped function isn't actually a function. As a result it isn't possible to derive an argument specification at all, even though the wrapped function is actually still callable.  \n\n\n> class function\\_wrapper\\(object\\): ... \n\n> @function\\_wrapper  \n>  def function\\(arg1, arg2\\): pass \n\n> >>> print\\(inspect.getargspec\\(function\\)\\)  \n>  Traceback \\(most recent call last\\):  \n>  File \"...\", line XXX, in <module>  \n>  print\\(inspect.getargspec\\(function\\)\\)  \n>  File \".../inspect.py\", line 813, in getargspec  \n>  raise TypeError\\('\\{\\!r\\} is not a Python function'.format\\(func\\)\\)  \n>  TypeError: <\\_\\_main\\_\\_.function\\_wrapper object at 0x107e0ac90> is not a Python function\n\nAnother example of introspection one can do is to use inspect.getsource\\(\\) to get back the source code related to a function. This also will fail, with it giving the source code for the nested wrapper function in the case of a function closure and again failing outright with an exception in the case of the class based wrapper.  \n  \n\n\n###  Wrapping class methods\n\n  \nNow, as well as normal functions, decorators can also be applied to methods of classes. Python even includes a couple of special decorators called @classmethod and @staticmethod for converting normal instance methods into these special method types. Methods of classes do provide a number of potential problems though.  \n\n\n> class Class\\(object\\): \n\n> @function\\_wrapper  \n>  def method\\(self\\):  \n>  pass \n\n> @classmethod  \n>  def cmethod\\(cls\\):  \n>  pass \n\n> @staticmethod  \n>  def smethod\\(\\):  \n>  pass\n\nThe first is that even if using functools.wraps\\(\\) or functools.update\\_wrapper\\(\\) in your decorator, when the decorator is applied around @classmethod or @staticmethod, it can fail with an exception. This is because the wrappers created by these, do not have some of the attributes being copied.  \n\n\n> class Class\\(object\\):  \n>  @function\\_wrapper  \n>  @classmethod  \n>  def cmethod\\(cls\\):  \n>  pass \n\n> Traceback \\(most recent call last\\):  \n>  File \"<stdin>\", line 1, in <module>  \n>  File \"<stdin>\", line 3, in Class  \n>  File \"<stdin>\", line 2, in wrapper  \n>  File \".../functools.py\", line 33, in update\\_wrapper  \n>  setattr\\(wrapper, attr, getattr\\(wrapped, attr\\)\\)  \n>  AttributeError: 'classmethod' object has no attribute '\\_\\_module\\_\\_'\n\nAs it happens, this is a Python 2 bug and it is fixed in Python 3 by ignoring missing attributes.  \n  \nEven when we run it under Python 3, we still hit trouble though. This is because both wrapper types assume that the wrapped function is directly callable. This need not actually be the case. A wrapped function can actually be what is called a descriptor, meaning that in order to get back a callable, the descriptor has to be correctly bound to the instance first.  \n\n\n> class Class\\(object\\):  \n>  @function\\_wrapper  \n>  @classmethod  \n>  def cmethod\\(cls\\):  \n>  pass \n\n> Class.cmethod\\(\\) \n\n> Traceback \\(most recent call last\\):  \n>  File \"classmethod.py\", line 15, in <module>  \n>  Class.cmethod\\(\\)  \n>  File \"classmethod.py\", line 6, in \\_wrapper  \n>  return wrapped\\(\\*args, \\*\\*kwargs\\)  \n>  TypeError: 'classmethod' object is not callable\n\n  \n\n\n###  Simple does not imply correctness\n\n  \nSo although the usual way that people implement decorators is simple, that doesn't mean they are necessarily correct and will always work.  \n  \nThe issues highlighted so far are:  \n  \n\n\n  * Preservation of function \\_\\_name\\_\\_ and \\_\\_doc\\_\\_.\n  * Preservation of function argument specification.\n  * Preservation of ability to get function source code.\n  * Ability to apply decorators on top of other decorators that are implemented as descriptors.\n\n  \nThe functools.wraps\\(\\) function is given as a solution to the first but doesn't always work, at least in Python 2. It doesn't help at all though with preserving the introspection of a functions argument specification and ability to get the source code for a function.  \n  \nEven if one could solve the introspection problem, the simple decorator implementation that is generally offered up as the way to do things, breaks the execution model for the Python object model, not honouring the descriptor protocol of anything which is wrapped by the decorator.  \n  \nThird party packages do exist which try and solve these issues, such as the [decorator](https://pypi.python.org/pypi/decorator) module available on PyPi. This module in particular though only helps with the first two and still has potential issues with how it works that may cause problems when trying to dynamically apply function wrappers via monkey patching.  \n  \nThis doesn't mean these problems aren't solvable, and solvable in a way that doesn't sacrifice performance. In my search at least, I could not actually find any one who has described a comprehensive solution or offered up a package which performs all the required magic so you don't have to worry about it yourself.  \n  \nThis blog post is therefore the first step in me explaining how it can be all made to work. I have stated the problems to be solved and in subsequent posts I will explain how they can be solved and what extra capabilities that gives you which enables the ability to write even more magic decorators than what is possible now with traditional ways that decorators have been implemented.  \n  \nSo stay tuned for the next instalment. Hopefully I can keep the momentum up and keep them coming. Pester me if I don't.",
  "date": "Tuesday, January 7, 2014",
  "author": "Graham Dumpleton",
  "url": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html",
  "post_id": "4875313059401974659",
  "blog_id": "2363643920942057324",
  "comments": [
    {
      "comment_id": "3423011433813124050",
      "author": "Maximilien Riehl",
      "author_url": "https://www.blogger.com/profile/16756650978984594796",
      "author_profile_id": "16756650978984594796",
      "content": "Thanks a lot for writing this. I look forward to writing better decorators that play well with introspection\\!",
      "timestamp": "January 8, 2014 at 6:31â€¯AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1389123061379#c3423011433813124050",
      "is_blog_author": false
    },
    {
      "comment_id": "1133224554120166895",
      "author": "Unknown",
      "author_url": "https://www.blogger.com/profile/15701789783736396136",
      "author_profile_id": "15701789783736396136",
      "content": "I have been a long advocate of the decorator package \\[1\\] and would go as far as to support its inclusion in the standard library.  \n  \n\\[1\\] https://pypi.python.org/pypi/decorator",
      "timestamp": "January 9, 2014 at 1:14â€¯AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1389190471115#c1133224554120166895",
      "is_blog_author": false
    },
    {
      "comment_id": "4503671214756567597",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "The 'decorator' package only addresses introspection of the name, doc strings etc, plus argument specification. From memory it doesn't handle getting to source code. It also fails as far as ensuring that Python execution model isn't broken as it still uses function closures. The way it uses on the fly source code compilation also means that it is no good in certain cases for more generic case of monkey patching where one needs to dynamically apply a customised function wrapper on a per call basis. This is because the runtime overhead of the compilation is too great. So in my mind the 'decorator' package falls far short of actually solving all the problems.",
      "timestamp": "January 9, 2014 at 8:59â€¯AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1389218381743#c4503671214756567597",
      "is_blog_author": true
    },
    {
      "comment_id": "962354333044276318",
      "author": "pydanny",
      "author_url": "https://www.blogger.com/profile/00481523876497446983",
      "author_profile_id": "00481523876497446983",
      "content": "Is it possible for you to link to the follow up articles in the series from this awesome blog post?",
      "timestamp": "March 30, 2014 at 1:25â€¯AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1396103158847#c962354333044276318",
      "is_blog_author": false
    },
    {
      "comment_id": "1761060142371701884",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "I am collecting all the related posts to decorators and the wrapt module at https://github.com/GrahamDumpleton/wrapt/tree/master/blog",
      "timestamp": "March 31, 2014 at 11:07â€¯AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1396224430571#c1761060142371701884",
      "is_blog_author": true
    },
    {
      "comment_id": "7648978922714021742",
      "author": "Unknown",
      "author_url": "https://www.blogger.com/profile/04921010772838901449",
      "author_profile_id": "04921010772838901449",
      "content": "Thank you for this fantastic post, I have just recently run into this problem, and I am glad there is a solution.",
      "timestamp": "November 23, 2014 at 7:27â€¯AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1416688040927#c7648978922714021742",
      "is_blog_author": false
    },
    {
      "comment_id": "1120560876985964962",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "Just please make sure you don't duplicate what I have done; Use the 'wrapt' module instead. http://wrapt.readthedocs.org",
      "timestamp": "November 23, 2014 at 11:20â€¯AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1416702011996#c1120560876985964962",
      "is_blog_author": true
    },
    {
      "comment_id": "6103026497624788133",
      "author": "smentek",
      "author_url": "https://www.blogger.com/profile/05528331106743629593",
      "author_profile_id": "05528331106743629593",
      "content": "inspect.getsource is fixed in python 3.5.2 and inspect.signature\\(\\) replaced deprecated inspect.getargspec\\(\\)",
      "timestamp": "February 14, 2017 at 12:33â€¯AM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1486992826850#c6103026497624788133",
      "is_blog_author": false
    },
    {
      "comment_id": "5075861921940468276",
      "author": "Unknown",
      "author_url": "https://www.blogger.com/profile/14388300496767287418",
      "author_profile_id": "14388300496767287418",
      "content": "Wow\\!\\! you sir, and a few other genuises are the reason that people like us,who stumble across a new language , find themselves being guided in the right direction. Could not thank you enough.",
      "timestamp": "September 8, 2017 at 8:52â€¯PM",
      "permalink": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html?showComment=1504867965354#c5075861921940468276",
      "is_blog_author": false
    }
  ],
  "labels": [
    "decorators",
    "python"
  ],
  "metadata": {
    "published_timestamp": "2014-01-07T17:40:00+11:00",
    "blog_title": "Graham Dumpleton",
    "page_title": "Graham Dumpleton: How you implemented your Python decorator is wrong.",
    "og_title": "How you implemented your Python decorator is wrong.",
    "og_description": "The rest of the Python community is currently doing lots of navel gazing over the issue of Python 3 adoption and the whole unicode/bytes div...",
    "og_url": "http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html"
  },
  "downloaded_images": []
}