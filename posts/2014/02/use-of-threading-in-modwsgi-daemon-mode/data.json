{
  "title": "Use of threading in mod_wsgi daemon mode.",
  "content": "Every so often I get asked why when examining a [mod\\_wsgi](http://code.google.com/p/modwsgi/) daemon process do there appear to be more threads running than what have been configured to handle requests. Since I can never be bothered trying to find what I wrote the previous time, I end up writing the explanation from scratch each time. Figured it may be time to simply throw it up here on my blog so I can at least refer to it here.  \n  \nConsider therefore the Apache/mod\\_wsgi configuration of:  \n\n\n> \n>     WSGIDaemonProcess mysite processes=3 threads=2 display-name=mod_wsgi\n>     WSGIProcessGroup mysite\n>     WSGIScriptAlias / /some/path/wsgi.py\n\nWhat this results in is mod\\_wsgi creating a set of three processes distinct from the main Apache child worker process. Multiple instances of the WSGI application will then be run, one in each process. The Apache child worker processes will automatically proxy the requests, with a request being picked up by one of the daemon processes and handed off to the WSGI application to handle. With the number of threads being specified as two, the most concurrent requests each process can handle is two. With a total of three processes, that is a total of six concurrent requests able to be handled across the whole WSGI application.  \n  \nIf we were to now look at the resulting process tree using something like htop tree view, we would see:  \n\n\n> \n>     20179 www-data 20 0 147M 76408 5680 S 28.0 0.9 10:17.85 │ ├─ mod-wsgi -k start\n>     20240 www-data 20 0 147M 76408 5680 S  1.0 0.9  0:14.99 │ │ ├─ mod-wsgi -k start\n>     20215 www-data 20 0 147M 76408 5680 S 12.0 0.9  5:05.16 │ │ ├─ mod-wsgi -k start\n>     20214 www-data 20 0 147M 76408 5680 S 14.0 0.9  4:53.99 │ │ ├─ mod-wsgi -k start\n>     20213 www-data 20 0 147M 76408 5680 S  0.0 0.9  0:00.63 │ │ ├─ mod-wsgi -k start\n>     20212 www-data 20 0 147M 76408 5680 S  0.0 0.9  0:00.00 │ │ └─ mod-wsgi -k start\n>     \n>     20178 www-data 20 0 138M 67680 5212 S 52.0 0.8 11:01.62 │ ├─ mod-wsgi -k start\n>     20241 www-data 20 0 138M 67680 5212 S  0.0 0.8  0:15.45 │ │ ├─ mod-wsgi -k start\n>     20230 www-data 20 0 138M 67680 5212 S 15.0 0.8  5:17.81 │ │ ├─ mod-wsgi -k start\n>     20229 www-data 20 0 138M 67680 5212 S 35.0 0.8  5:24.63 │ │ ├─ mod-wsgi -k start\n>     20228 www-data 20 0 138M 67680 5212 S  0.0 0.8  0:00.71 │ │ ├─ mod-wsgi -k start\n>     20227 www-data 20 0 138M 67680 5212 S  0.0 0.8  0:00.00 │ │ └─ mod-wsgi -k start\n>     \n>     20177 www-data 20 0 137M 67764 5428 S  7.0 0.8 10:47.27 │ ├─ mod-wsgi -k start\n>     20207 www-data 20 0 137M 67764 5428 S  0.0 0.8  0:15.18 │ │ ├─ mod-wsgi -k start\n>     20206 www-data 20 0 137M 67764 5428 S  7.0 0.8  5:16.82 │ │ ├─ mod-wsgi -k start\n>     20205 www-data 20 0 137M 67764 5428 S  0.0 0.8  5:11.55 │ │ ├─ mod-wsgi -k start\n>     20204 www-data 20 0 137M 67764 5428 S  0.0 0.8  0:00.69 │ │ ├─ mod-wsgi -k start\n>     20203 www-data 20 0 137M 67764 5428 S  0.0 0.8  0:00.00 │ │ └─ mod-wsgi -k start\n\nThe question is, since we have configured the daemon process group to only have 2 threads per process, why are we seeing a total of 5 threads in each process?  \n  \nThe answer is that for a configuration of:  \n\n\n> \n>     WSGIDaemonProcess mysite threads=num ...\n\nthere will be num+3 threads, where 'num' is the number of request threads indicated by the 'threads' option to the WSGIDaemonProcess directive. If no 'threads' option was specified, then the number of request threads will be 15.  \n  \nWhat are these three extra threads then? They are as follows:  \n  \n1\\. The main thread which was left running after the daemon process forked from Apache. It is from this thread that the requests threads are created initially. It will also create the other two additional threads, the purpose of which is described below. After it has done this, this main thread becomes a caretaker for the whole process. It will wait on a special socketpair, which a signal handler will write a character to as a flag that the process should shutdown. In other words, this main thread just sits there and stops the process from exiting until told to.  \n  \n2\\. The second thread is a monitoring thread. What it does is manage things like the process activity timeout and shutdown timeout. If either of those timeouts occur it will send a signal to the same process \\(ie., itself\\), to trigger shutdown of the process.  \n  \n3\\. The third thread is yet another monitoring thread, but one which specifically detects whether the whole Python interpreter itself gets into a complete deadlock and stops doing anything. If this is detected it will again send a signal to the same process to trigger a shutdown.  \n  \nSo the additional threads are to manage process shutdown and ensure the process is still alive and doing stuff.  \n  \nNow under normal circumstances there will be one further additional thread created, but this is a transient thread which is only created at the time that the main thread has detected that the process is due to shutdown. This thread is what is called the reaper thread. All it will do is sleep for a specified period and if the process is still running at that point, it will forcibly kill the process.  \n  \nThe reaper thread is needed because the main thread will provide a short grace period to allow requests to complete and then destroy the Python interpreter, including triggering of any 'atexit' registered callbacks in each sub interpreter context. Because pending requests and destruction of the interpreters could take an unknown amount of time, or even hang, the reaper thread ensures the process is still killed if shutdown takes longer than allowed.  \n  \nAnd there we have it, all intentional and nothing to worry about.",
  "date": "Thursday, February 20, 2014",
  "author": "Graham Dumpleton",
  "url": "http://blog.dscpl.com.au/2014/02/use-of-threading-in-modwsgi-daemon-mode.html",
  "post_id": "5877544788991179116",
  "blog_id": "2363643920942057324",
  "comments": [
    {
      "comment_id": "1172753452599024507",
      "author": "Unknown",
      "author_url": "https://www.blogger.com/profile/07046481051124400378",
      "author_profile_id": "07046481051124400378",
      "content": "Very interesting.  \n  \n\"If no 'threads' option was specified, then the number of request threads will be 15\"  \n  \nShouldn't that be 9 ? \\(num+3 threads per process, num is 0 and there are 3 process\\)  \nOr num is 2 by default ?",
      "timestamp": "February 20, 2014 at 9:22 PM",
      "permalink": "http://blog.dscpl.com.au/2014/02/use-of-threading-in-modwsgi-daemon-mode.html?showComment=1392891761713#c1172753452599024507",
      "is_blog_author": false
    },
    {
      "comment_id": "3723817134455922206",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "I am just saying that if no 'threads' option was given to WSGIDaemonProcess directive, then 'num', the number of **request threads** for each process defaults to 15. In that case it would be 15+3 threads, or 18 active threads in total in each process if you were too look at what was running. The number of process doesn't come into it as far as how many threads are running in a specific process.",
      "timestamp": "February 20, 2014 at 9:29 PM",
      "permalink": "http://blog.dscpl.com.au/2014/02/use-of-threading-in-modwsgi-daemon-mode.html?showComment=1392892143576#c3723817134455922206",
      "is_blog_author": true
    },
    {
      "comment_id": "1720220418192945663",
      "author": "exhuma",
      "author_url": "https://www.blogger.com/profile/16462419082896296288",
      "author_profile_id": "16462419082896296288",
      "content": "Do you know how those 3 threads interact with application that have global variables? For example for DB connections?  \n  \nIn other words, if I write a Flask application, and open a DB connection in the global scope.  \n  \nWill this cause 3 DB connections to be kept open all the time? Or are these threads unrelated to the WSGI application?",
      "timestamp": "April 19, 2016 at 10:05 PM",
      "permalink": "http://blog.dscpl.com.au/2014/02/use-of-threading-in-modwsgi-daemon-mode.html?showComment=1461067516007#c1720220418192945663",
      "is_blog_author": false
    },
    {
      "comment_id": "701146426603084370",
      "author": "Graham Dumpleton",
      "author_url": "https://www.blogger.com/profile/13609779138164842374",
      "author_profile_id": "13609779138164842374",
      "content": "@exhuma Please use the mod\\_wsgi mailing list for questions like this. Comments aren't suitable to carry out a discussion.  \n  \nhttp://modwsgi.readthedocs.org/en/develop/finding-help.html",
      "timestamp": "April 19, 2016 at 10:07 PM",
      "permalink": "http://blog.dscpl.com.au/2014/02/use-of-threading-in-modwsgi-daemon-mode.html?showComment=1461067679077#c701146426603084370",
      "is_blog_author": true
    }
  ],
  "labels": [
    "apache",
    "mod_wsgi",
    "python",
    "wsgi"
  ],
  "metadata": {
    "published_timestamp": "2014-02-20T15:26:00+11:00",
    "blog_title": "Graham Dumpleton",
    "page_title": "Graham Dumpleton: Use of threading in mod_wsgi daemon mode.",
    "og_title": "Use of threading in mod_wsgi daemon mode.",
    "og_description": "Every so often I get asked why when examining a mod_wsgi  daemon process do there appear to be more threads running than what have been conf...",
    "og_url": "http://blog.dscpl.com.au/2014/02/use-of-threading-in-modwsgi-daemon-mode.html"
  },
  "downloaded_images": []
}